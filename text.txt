vagrant@ubuntu-bionic:/vagrant$ python -m venv ~/env
vagrant@ubuntu-bionic:/vagrant$ source ~/env/bin/activate
(env) vagrant@ubuntu-bionic:/vagrant$ pip install -r requirements.txt
(env) vagrant@ubuntu-bionic:/vagrant$ django-admin startproject profiles_project .
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py startapp profiles_api

for testing working fine or not 
python manage.py runserver 0.0.0.0:8000

run in url type http://127.0.0.1:8000/

models.py 
settings.py
admins.py


api call
Use standard http method

GET
=>Get one or more items

POST 
=>Post Create an items

PUT
=>Update an items

Patch
=>Partially update an items

Delete
=>Delete an item 


API views gives most control over our logic

advantage
calling other API 'S
working with local files



need to use API views

whenever need full control over application logic
processing files and rendering synchronus response
calling external API 's
Acess local files


set first API

in views.py in app ie,profiles_api 

configure view url 
urls.py in project 


first check url get api/ its checked in project urls.py there specify include app urls.py so check after api/ matching urls
ther find a match and provide response

serializer helps to convert data into python object and vice versa.


f'Hello {name}!'
insert name into string


initially add 4 methods data into views.py

 git config user.name "Mahit"   setting user for current repository
 git config user.name   checking current username 
 git diff returns changes line by line instead of listing files which are changed


 view sets 
 ->maps to common api object actions
 ->List 

 getting a list of object

 -> Create 

 creating new objects

 ->retrive 
 getting new objects

 -> update
 updating an object

 ->partial_update 

 update part of an object 

 -> destroy 

 destroy / Delete an object


 Useful for standard db operations 
fastest way to make db interface 


when to use viewsets 

simple CRUD operations 

simple API for manage predefined api object 

http method support particular end points 


from django.urls import path, include here include use include list of urls

router.register('hello-viewset', views.HelloViewSet, base_name='hello-viewset')
first name of viewset which is access through urlname.
third parameter retrives data url retrive function in django 


path('',include(router.urls)),

helps to include all of the urls  by using '' 







